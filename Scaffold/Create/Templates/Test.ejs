
	const axios = require('axios')
	var assert = require('assert')
	var  <%= name %> = require('../../../Api/backend/<%= name %>')
	var faker = require('faker')
	var moment = require('moment')
	var Fake = require('../../FakeSql')

	module.exports  = {

		async run(db, name) {
		 
			let config = {
				name: "<%= varName %>",
				post: {},
				get: {id: 1},
				put: {
					id: 1,
					data:{}
				},
				destroy: {id: 1},
				setId: function(id) {
					this.get.id = id;
					this.put.id = id;
					this.destroy.id = id;
				}
			}
			config.post = Fake.fakeSql(db[name], config);
			config.put.data = Fake.fakeSql(db[name], config);

			this.post(config)
			this.getOne(config)
			this.getAll(config)
			this.update(config)
			this.destroy(config)
			
			<% if (currentModel) { %>
				<% for (let model of currentModel.hasMany) { %>

					<% let lc_model = LowerCaseFirstLetter(model) %>
					<% let lc_name = LowerCaseFirstLetter(name) %>
					<% let functionName = `${name}With${model}` %>

					config.post.<%= lc_model %> = Fake.fakeSql(db.<%= model %>, config);

					this.<%= functionName %>(config)
					this.create<%= name %><%= model %>(config)
					this.get<%= name %><%= model %>WithAllAssociations(config)
					this.get<%= name %>WithAllAssociations(config)
				
				<% } %>
			<% } %>

		},

		post(config) {
			describe(`<%= varName %> post calls`, function() {
				it("should have status code 1", function() {
					return <%= name %>.create(config.post).then(data => {
						assert.equal(data.code, 1)
						config.setId(data.<%= varName %>.id)
					});
				})
			})
		},
		getOne(config) {
			describe(`<%= varName %> get one calls`, function() {
				it("should have status code 1", function() {
					return <%= name %>.getOne(config.get.id).then(data => {
						assert.equal(data.code, 1) 
					});
				})
			})
		},
		getAll(config) {
			describe(`<%= varName %> get all calls`, function() {	
				it("should have status code 1", function() {
					return <%= name %>.getAll().then(data => {
						assert.equal(data.code, 1) 
					});
				})
				
				it("should count occurrences in the database", function() {
					return <%= name %>.count().then(data => {
						assert.equal(data.code, 1)
						assert.equal(data.count > 0, true);
					});
				})
			})
		},

		update(config) {
			describe(` <%= varName %> update calls`, function() {
					it("should have status code 1", function() {
						return <%= name %>.update(config.put.id, config.put.data).then(data => {
						assert.equal(data.code, 1) 
					});
				})
			})
		},

		destroy(config) {
			describe(` <%= varName %> destroy calls`, function() {
					it("should have status code 1", function() {
						return <%= name %>.destroy(config.destroy.id).then(data => {
						assert.equal(data.code, 1) 
					});
				})
			})
		},

		<% if (currentModel) { %>
			<% for (let model of currentModel.hasMany) { %>

				<% let lc_model = LowerCaseFirstLetter(model) %>
				<% let lc_name = LowerCaseFirstLetter(name) %>
				<% let functionName = `${name}With${model}` %>
	
				<%= functionName %>(config) {
					describe(`get<%= functionName %>(): get one with <%= lc_model %>`, function() {
						it("should have status code 1", function() {
							return <%= name %>.get<%= functionName %>(20).then(data => {
								assert.equal(data.code, 1) 
							});
						})
					})
				},

				create<%= name %><%= model %>(config) {
					describe(`create<%= functionName %>(): post <%= name %> with <%= lc_model %>`, function() {
						it("should have status code 1", function() {
							return <%= name %>.create<%= functionName %>(config.post).then(data => {
								assert.equal(data.code, 1) 
							});
						})
					})
				},

				get<%= name %><%= model %>WithAllAssociations(config) {
					describe(`get<%= name %><%= model %>WithAllAssociations(): get one with <%= model %> Associations`, function() {
						it("should have status code 1", function() {
							return <%= name %>.get<%= model %>WithAllAssociations(20).then(data => {
								assert.equal(data.code, 1) 
							});
						})
					})
				},
				get<%= name %>WithAllAssociations(config) {
					describe(`get<%= name %>WithAllAssociations(): get all with Associations`, function() {
						it("should have status code 1", function() {
							return <%= name %>.getWithAllAssociations(20).then(data => {
								assert.equal(data.code, 1) 
							});
						})
					})
				},
			<% } %>
		<% } %>
}